#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define RandomWalk  0
#define GreedyWalk  1
#define MaximumWalk 2

// Graph struct.
struct graphNode {
   char  name[42];
   int   arcCnt;
   int   weights[10];
   struct graphNode *arcs[10];
};
typedef struct graphNode graph;

// linked list struct.
struct listNode {
   char  name[42];
   struct listNode *next;
   struct graphNode *graph;
};
typedef struct listNode link;

/********************************************************/
/* INSERT NODE INTO LINKED-LIST.                        */
/********************************************************/
link* INSERT_LIST(link *head, char name[42]) {
link  *current, *new;
    // Make a new link and populate name field.
    new = (link *)malloc(sizeof(link));
    strcpy(new->name, name);
    // Empty list.
    if (head == NULL) {
       new->next  = NULL;   
       head       = new;
       return head;
    } 
    // Add to front of list.
    current = head;
    if (strcmp(current->name, name) >= 0) {
        new->next = current;   
        head      = new;
        return head;
    } 
    // Search for place to add to middle of list.
    current = head;
    while (current->next != NULL) {
       if (strcmp(current->next->name, name) >= 0 ) { 
          new->next     = current->next;
          current->next = new;
          return head;
       }
       current = current->next;
    }
    // Search failed, add to end of list.
    new->next     = NULL;
    current->next = new;
    return head;
}

/********************************************************/
/* INSERT NODE INTO GRAPH.                              */
/********************************************************/
void INSERT_GRAPH(link *head, char name[]) {
int   i;
link  *current;
graph *new;
    // Search linked-list for name (we assume name exists).
    current = head;
    while (current != NULL) {
       if (!strcmp(current->name, name)) break;
       else current = current->next ;
    }
    // Make a new graph node and populate it.
    new = (graph *)malloc(sizeof(graph));
    strcpy(new->name, name);
    new->arcCnt = 0;
    for (i = 0; i < 10; i++) {
        new->weights[i] = 0;
        new->arcs[i]    = NULL;
    }
    // Set link-list to point to new graph node.
    current->graph = new;
}

/********************************************************/
/* DISPLAY LINKED-LIST.                                 */
/********************************************************/
void DISPLAY_LIST(link *head) {
link *current;
    current = head;
    while (current != NULL) {
       printf("%s\n", current->name);
       current = current->next ;
    }
}

/********************************************************/
/* INSERT ARCS INTO GRAPH.                              */
/********************************************************/
void INSERT_ARCS(link *head, char start[], char stop[], int cost) {
link *current;
graph *Start, *Stop;
    // Search linked-list for start (we assume start exists).
    current = head;
    while (current != NULL) {
       if (!strcmp(current->name, start)) break;
       else current = current->next ;
    }
    // Set pointer to starting node.
    Start = current->graph;
    // Search linked-list for stop (we assume stop exists).
    current = head;
    while (current != NULL) {
       if (!strcmp(current->name, stop)) break;
       else current = current->next ;
    }
    // Set pointer to stoping node.
    Stop = current->graph;
    // Set arc from starting graph node to stoping graph node.
    Start->arcs[Start->arcCnt]    = Stop;
    Start->weights[Start->arcCnt] = cost;
    Start->arcCnt++;
}

/********************************************************/
/* RANDOM WALK TRAVERSAL.                               */
/********************************************************/
int RANDOM_WALK(link *head, char start[]) {
int  i, index;
int  cost;
link *current;
graph *Start;
    printf("RANDOM WALK\n");
    // Seed random number generator.
    srand(12212012);
    // Search linked-list for start (we assume start exists).
    current = head;
    while (current != NULL) {
       if (!strcmp(current->name, start)) break;
       else current = current->next ;
    }
    // Set pointer to starting node.
    Start = current->graph;
    // Conduct random walk through graph.
    cost = 0;
    for (i = 0; i < 10000; i++) {
       if (Start->arcCnt == 0) return 999999; // We hit a dead end!
       index = (random() % Start->arcCnt); 
       if (Start->arcs[index] != NULL) {   // Do we have a valid link?
          cost += Start->weights[index];
//printf("%d %d %s %d\n", Start->arcCnt, index, Start->name, Start->weights[index]);
          Start = Start->arcs[index];
       }
       if (!strcmp(Start->name, "Home")) return cost;
    }
    return 999999; // We got caught in a loop!
}

/********************************************************/
/* GREEDY WALK TRAVERSAL.                               */
/********************************************************/
int GREEDY_WALK(link *head, char start[]) {
int  i, j, index;
int  cost, cheapo;
link *current;
graph *Start;
    printf("GREEDY WALK\n");
    // Search linked-list for start (we assume start exists).
    current = head;
    while (current != NULL) {
       if (!strcmp(current->name, start)) break;
       else current = current->next ;
    }
    // Set pointer to starting node.
    Start = current->graph;
    // Conduct random walk through graph.
    cost = 0;
    for (i = 0; i < 10000; i++) {
       if (Start->arcCnt == 0) return 999999; // We hit a dead end!
       cheapo = 999999;
       for (j = 0; j < Start->arcCnt; j++) {
           if (cheapo > Start->weights[j]) {
              cheapo = Start->weights[j];
              index = j; 
           }
       }
       if (Start->arcs[index] != NULL) {   // Do we have a valid link?
          cost += Start->weights[index];
//printf("%d %d %s %d\n", Start->arcCnt, index, Start->name, Start->weights[index]);
          Start = Start->arcs[index];
       }
       if (!strcmp(Start->name, "Home")) return cost;
    }
    return 999999; // We got caught in a loop!
}

/********************************************************/
/* MAXIMUM WALK TRAVERSAL.                              */
/********************************************************/
int MAXIMUM_WALK(link *head, char start[]) {
int  i, j, index;
int  cost, cheapo;
link *current;
graph *Start;
    printf("MAXIMUM WALK\n");
    // Search linked-list for start (we assume start exists).
    current = head;
    while (current != NULL) {
       if (!strcmp(current->name, start)) break;
       else current = current->next ;
    }
    // Set pointer to starting node.
    Start = current->graph;
    // Conduct random walk through graph.
    cost = 0;
    for (i = 0; i < 10000; i++) {
       if (Start->arcCnt == 0) return 999999; // We hit a dead end!
       cheapo = -1;
       for (j = 0; j < Start->arcCnt; j++) {
           if (cheapo < Start->weights[j]) {
              cheapo = Start->weights[j];
              index = j; 
           }
       }
       if (Start->arcs[index] != NULL) {   // Do we have a valid link?
          cost += Start->weights[index];
//printf("%d %d %s %d\n", Start->arcCnt, index, Start->name, Start->weights[index]);
          Start = Start->arcs[index];
       }
       if (!strcmp(Start->name, "Home")) return cost;
    }
    return 999999; // We got caught in a loop!
}

/********************************************************/
/* FREE DYNAMIC MEMORY.                                 */
/********************************************************/
void FREE_MEMORY(link *head) {
link  *current;
graph *node;
    current = head;
    while (current->next != NULL) {
       // Free graph node pointed to by linked list.
       node = current->graph;
       free(node);
       // Free linked list node.
       current  = current->next;
       free(head);
       head = current;
    }
    free(head);
    head = NULL;
}

/********************************************************/
/* MAIN                                                 */
/********************************************************/
int main(int argc, char *argv[]) {
char name[84];
char start[84], stop[84];
int  traversalFlag;
int  cost;
FILE *data;
link *head;
    // Check for command line arguments.
    if (argc == 1) {
       printf("ERROR - No command line arguments.\n");
       exit(0);
    } 
    // Determine traversal method.
    traversalFlag = RandomWalk; // Default method.
    if (argc == 2) {
       if (!strcmp(argv[1], "0")) traversalFlag = RandomWalk;
       if (!strcmp(argv[1], "1")) traversalFlag = GreedyWalk;
       if (!strcmp(argv[1], "2")) traversalFlag = MaximumWalk;
    }

    // Initialize head & tails.
    head = NULL;
    // Open data file.
    data = fopen("hw9.data", "r");
    if (data == NULL) {
       printf("ERROR - cound not open hw9.data.\n");
       exit(0);
    }
    // Read first dataset and insert into list.
    while (1) {
        fscanf(data, "%s", name);
        if (!strcmp("STOP", name)) break;
        else {
           head = INSERT_LIST(head, name);
           INSERT_GRAPH(head, name);
        }
    }
    // Display list contents (just for testing).
//    DISPLAY_LIST(head);
    // Read second dataset and add arcs to graph.
    while (1) {
        fscanf(data, "%s %s %d", start, stop, &cost);
        if (!strcmp("STOP", start)) break;
        else INSERT_ARCS(head, start, stop, cost);
    }
    // Read third dataset and traverse graph.
    fscanf(data, "%s", start);
    if (traversalFlag == RandomWalk) cost = RANDOM_WALK(head, start);
    if (traversalFlag == GreedyWalk) cost = GREEDY_WALK(head, start);
    if (traversalFlag == MaximumWalk) cost = MAXIMUM_WALK(head, start);
    printf("Starting point: %s\n", start);
    printf("Stopping point: Home\n");
    printf("Trip cost.....: %d\n", cost);

    // Free dynamic memory.
    FREE_MEMORY(head);

    // Close data file.
    fclose(data);

    return 0;
}
